import type { Error } from "IO"

import File from "File"
import { always, complement, ifElse, when } from "Function"
import {} from "Monad"
import String from "String"
import Wish from "Wish"

import FS from "@/FS"



// Preserve
// - clean - has the value been written to source?
// - sourceFile - where does the value get saved?
// - value - the preserved value
export type Preserve = Preserve(Boolean, String, String)
export alias Memory = Wish Error Preserve


//## ACCESSORS

/**
 * Has the value been saved?
 * @since 0.0.1
 */
isClean :: Preserve -> Boolean
export isClean = where {
  Preserve(d, _, _) =>
    d
}

isDirty :: Preserve -> Boolean
export isDirty = complement(isClean)

/**
 * Where is the value saved?
 * @since 0.0.1
 */
source :: Preserve -> String
export source = where {
  Preserve(_, f, _) =>
    f
}

/**
 * What is the saved value?
 * @since 0.0.1
 */
value :: Preserve -> String
export value = where {
  Preserve(_, _, v) =>
    v
}

//## CONSTRUCTORS

/**
 * Create a Preserved value in memory
 * @since 0.0.1
 */
export create = (file, v) => pipe(
  FS.normalize,
  Preserve(true, $, v),
)(file)

/**
 * Load a Preserved value from source
 * @since 0.0.1
 */
load :: String -> Memory
export load = (file) => pipe(
  FS.normalize,
  File.read,
  map(Preserve(true, file)),
)(file)

//## METHODS

/**
 * Set the preserved value and set clean to false
 */
set :: String -> Preserve -> Preserve
export set = (x, p) => where(p) {
  Preserve(d, s, _) =>
    Preserve(false, s, x)
}

/**
 * Transform the preserved value and set clean to false
 * @since 0.0.1
 */
update :: (String -> String) -> Preserve -> Preserve
export update = (fn, p) => where(p) {
  Preserve(d, s, v) =>
    Preserve(false, s, fn(v))
}

/**
 * Set dirtiness
 * @since 0.0.1
 */
setClean :: Preserve -> Preserve
export setClean = where {
  Preserve(_, s, v) =>
    Preserve(true, s, v)
}

/**
 * Set cleanliness
 * @since 0.0.1
 */
setDirty :: Preserve -> Preserve
export setDirty = where {
  Preserve(_, s, v) =>
    Preserve(false, s, v)
}

isEmpty :: Preserve -> Boolean
export isEmpty = where {
  Preserve(_, _, v) =>
    v == ""
}

/**
 * Save the file to source only if it is dirty
 * @since 0.0.1
 */
save :: Preserve -> Memory
export save = (pres) => ifElse(
  isDirty,
  pipe(
    setClean,
    flush,
  ),
  Wish.good,
)(pres)

/**
 * Mount the preserved value from source (or write a default value if no value is present)
 * @since 0.0.1
 */
ensure :: String -> String -> Memory
export ensure = (src, defaultValue) => pipe(
  load,
  chain(
    (loaded) => if (isEmpty(loaded)) {
      pipe(
        set(defaultValue),
        flush,
      )(loaded)
    } else {
      Wish.good(loaded)
    },
  ),
)(src)

/**
 * Write the value to source and set clean to true
 * @since 0.0.1
 */
flush :: Preserve -> Memory
export flush = (pres) => {
  v = value(pres)
  f = source(pres)
  return pipe(
    File.write(f),
    map(always(Preserve(true, f, v))),
  )(v)
}

/**
 * Write the value to a temp file and set clean to true
 * @since 0.0.1
 */
backup :: Preserve -> Memory
export backup = (pres) => {
  v = value(pres)
  raw = source(pres)
  tmp = FS.tempdir(raw)
  return pipe(
    File.write(tmp),
    map(always(Preserve(true, raw, v))),
  )(v)
}
