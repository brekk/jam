import { mapWithKey, values } from "Dictionary"
import Term from "Terminal"
import { assertEquals, test } from "Test"



printReport = (name, i) => `${name}\n  â†³ ${
  pipe(
    show,
    Term.ansiColor([Term.ansi.FormatBold, Term.ansi.FGBrightYellow]),
  )(i)
}`

createTest = (name, fn, i, o) => test(printReport(name, i), () => assertEquals(fn(i), o))

export report = (fn, name, listInOut) => pipe(
  map(where { #[i, o] => createTest(name, fn, i, o) }),
)(listInOut)

templateChainTest = (name, fn, i, o) => test(
  printReport(name, i),
  () => pipe(
    fn,
    chain(assertEquals(o)),
  )(i),
)


export asyncReport = (fn, name, listInOut) => pipe(
  map(where { #[i, o] => templateChainTest(name, fn, i, o) }),
)(listInOut)


export reportBook = (fn, name, testDict) => pipe(
  mapWithKey(createTest(name, fn)),
  values,
)(testDict)

caseN2 :: (a -> b -> c) -> #[a, b] -> c
export caseN2 = (fn, pair) => where(pair) {
  #[a, b] =>
    fn(a, b)
}
